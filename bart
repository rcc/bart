#!/bin/bash
################################################################################
# Copyright 2012 Robert C. Curtis. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#    1. Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials
#       provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY ROBERT C. CURTIS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ROBERT C. CURTIS OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
# DAMAGE.
#
# The views and conclusions contained in the software and documentation
# are those of the authors and should not be interpreted as representing
# official policies, either expressed or implied, of Robert C. Curtis.
################################################################################

BARTVERSION=DEV

# Color constants
NO="\033[0m"
BR="\033[30m"
RD="\033[31m"
GR="\033[32m"
YL="\033[33m"
BL="\033[34m"
MG="\033[35m"
CY="\033[36m"

HOSTOS=$(uname -s)

# Usage command
usage () {
	echo "usage: bart [OPTIONS] <repository>"
	echo "OPTIONS:"
	echo "  -h, --help      Print usage"
	echo "  --version       Print version"
	echo "  --tag           Tag revision if build succeeds"
	echo "  --settag <>     Use supplied tag instead of generated tag"
	echo "  --release       Run the release phase of the build"
	echo "  --branch <>     Specify branch to checkout"
	echo "  --dotfile <>    Specify .bart file inside of the repository to use"
	echo "  --extdotfile <> Specify .bart file outside of the repository to use"
	echo "  --head          Get the current head revision"
}

# Error command
error () {
    echo -e "[ERROR]" $* 1>&2
}

# Warning command
warn () {
    echo -e "[WARNING]" $* 1>&2
}

# Info command
info () {
    echo -e "[INFO]" $* 1>&2
}

# Defaults
DOTAG=0
TAG=
RELEASE=0
BRANCH=
BR_OPT=
DOTFILE=
EXTDOTFILE=
GETHEAD=0

# Handle Options
while [ "${1:0:1}" == "-" ]; do
	# Help
	if [ "$1" == "-h" -o "$1" == "--help" ]; then
		usage
		exit 0
	fi
	# Version
	if [ "$1" == "--version" ]; then
		echo "$BARTVERSION"
		exit 0
	fi
	# Tag
	if [ "$1" == "--tag" ]; then
		DOTAG=1
		shift && continue
	fi
	# Set Tag
	if [ "$1" == "--settag" ]; then
		shift
		TAG=$1
		shift && continue
	fi
	# Release
	if [ "$1" == "--release" ]; then
		RELEASE=1
		shift && continue
	fi
	# Branch
	if [ "$1" == "--branch" ]; then
		shift
		BRANCH=$1
		BR_OPT="-b $BRANCH"
		shift && continue
	fi
	# Internal Dot File
	if [ "$1" == "--dotfile" ]; then
		shift
		DOTFILE=$1
		shift && continue
	fi
	# External Dot File
	if [ "$1" == "--extdotfile" ]; then
		shift
		EXTDOTFILE=$1
		shift && continue
	fi
	# Head
	if [ "$1" == "--head" ]; then
		GETHEAD=1
		shift && continue
	fi
	warn "Unrecognized option: $1"
	shift
done
# if no arguments, print usage
if [ "$#" -eq 0 ]; then
    usage
    exit 1
fi
REPO="$1"
shift

# Get head revision if asked
if [ "$GETHEAD" -eq 1 ]; then
	if [ -z "$BRANCH" ]; then
		LSREMOTE=$(git ls-remote "$REPO")
		if [ $? -ne 0 -o -z "$LSREMOTE" ]; then
			exit 1
		fi
		echo "$LSREMOTE" | awk '$2 == "HEAD" {print $1;}'
	else
		LSREMOTE=$(git ls-remote "$REPO" "$BRANCH")
		if [ $? -ne 0 -o -z "$LSREMOTE" ]; then
			exit 1
		fi
		echo "$LSREMOTE" | awk '{print $1;}'
	fi
	exit 0
fi

# Create a Temporary Directory Name
if [ "$HOSTOS" == "Darwin" ]; then
	TMPREPO=$(mktemp -d -t bart)
else
	TMPREPO=$(mktemp -d --tmpdir bart.XXXXXX)
fi
if [ -n "$TMPREPO" ]; then
	trap "rm -rf $TMPREPO" EXIT
fi

# Clone repository
echo "[CLONE]"
if ! git clone $BR_OPT "$REPO" "$TMPREPO"; then
	error "Could not clone repository"
	exit 1
fi

# Source the repo's .bart file
if [ -z "$DOTFILE" ]; then
	DOTFILE="${TMPREPO}/.bart"
else
	DOTFILE="${TMPREPO}/${DOTFILE}"
fi
if [ -n "$EXTDOTFILE" ]; then
	DOTFILE="${EXTDOTFILE}"
fi
source "$DOTFILE"
if [ $? -ne 0 ]; then
	error "Repository does not seem to have a .bart file"
	exit 1
fi

# Change directory to repository
ORIGPWD="$(pwd)"
cd "$TMPREPO"

# Tag repository
if [ "$DOTAG" -eq 1 ]; then
	echo "[TAG]"
	# only tag if we're not already on a tag
	if git describe --tags --exact-match HEAD 2>/dev/null 1>/dev/null; then
		info "This revision is already tagged"
		exit 1
	fi
	if [ -z "$TAG" ]; then
		if ! bart_get_tag; then
			error "Tagging Failed"
			exit 1
		fi
	fi
	if [ -n "$TAG" ]; then
		git tag "$TAG"
	else
		error "No tag generated"
		exit 1
	fi
fi

# Pre Build
echo "[PRE BUILD]"
if ! bart_pre_build; then
	error "Prebuild Failed"
	exit 1
fi

# Build
echo "[BUILD]"
if ! bart_build; then
	error "Build Failed"
	exit 1
fi

# Post Build
echo "[POST BUILD]"
if ! bart_post_build; then
	error "Postbuild Failed"
	exit 1
fi

# Package
echo "[PACKAGE]"
PACKAGE=
if ! bart_package; then
	error "Package Failed"
	exit 1
fi

# Everything successful, push tag
if [ "$DOTAG" -eq 1 ]; then
	echo "[PUSH]"
	if ! git push --tags origin; then
		error "Could not push tag"
		return 1
	fi
fi

# Release
if [ "$RELEASE" -eq 1 ]; then
	echo "[RELEASE]"
	if ! bart_release; then
		error "Release Failed"
		exit 1
	fi
else
	if [ -f "$PACKAGE" ]; then
		mv -v "$PACKAGE" "${ORIGPWD}/"
	fi
fi
